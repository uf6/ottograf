#!/bin/bash
display_usage() { 
  echo "ottograf - Transforms a JSON-LD input with @relation hints into a node/edges json output." 
  echo -e ""
  echo -e "usage:"
  echo -e ""
  echo -e "  ottograf [format] [options] input.jsonld [output.json] [flags]" 
  echo -e ""
  echo -e "format:"
  echo -e ""
  echo -e "  d3      : template for d3.js using " 
  echo -e "               -r @relation -n nodes -e links -s source -t target" 
  echo -e "               -p '{directed:\"true\",graph:[]}' -x @id id"
  echo -e "  kumu    : template for kumu using  " 
  echo -e "               -r @relation -n elements -e connections -i " 
  echo -e "               -s from -t to -x @id label"
  echo -e ""
  echo -e "options:"
  echo -e ""
  echo -e "  input:"
  echo -e "" 
  echo -e "    -r|--relation-hint key    : name of relation hint key (of boolean value)"
  echo -e "                                used to differentiate nodes and edges"
  echo -e "                                (default=@relation)"
  echo -e "" 
  echo -e "  output:"
  echo -e "" 
  echo -e "    -n|--nodes-key KEY        : name of key for nodes array in output graph"
  echo -e "                                (default=nodes)"
  echo -e "    -e|--edges-key KEY        : name of key for edges array in output graph"
  echo -e "                                (default=links)"
  echo -e "    -s|--edges-source KEY     : name of edge key for source node in output graph"
  echo -e "                                (default=source)"
  echo -e "    -t|--edges-target KEY     : name of edge key for target node in output graph"
  echo -e "                                (default=target)"
  echo -e "    -i|--edges-index          : edges's index is numerical (zero based array) "
  echo -e "                                instead of default index with node @id"
  echo -e "    -p|--graph-prefix PREFIX  : key/value pairs prefixed in output graph."
  echo -e "                                should be valid JSON without spaces."
  echo -e "                                (default=)"
  echo -e "" 
  echo -e "   transform:"
  echo -e "" 
  echo -e "    -x|--transform INPUT-KEY OUTPUT-KEY :"
  echo -e "                                key name transformation (can be entered several times to transform multiple keys)"
  echo -e "                                (default=)"
  echo -e "" 
  echo -e "flags:"
  echo -e ""
  echo -e "  -h|--help "
  echo -e "  -c|--compact "
  echo -e "  -d|--debug "
  echo -e "" 
  echo -e "examples:" 
  echo -e "=========" 
  echo -e "" 
  echo -e "Outputs transform results on screen with the default options " 
  echo -e "" 
  echo -e "  ottograf data.jsonld" 
  echo -e "" 
  echo -e "Outputs transform results to data.json file for use with d3.js " 
  echo -e "" 
  echo -e "  ottograf d3 data.jsonld" 
  echo -e "" 
  echo -e "Outputs transform results to data.json file for use with d3.js " 
  echo -e "" 
  echo -e "  ottograf data.jsonld -x @id name -x @type type"  
  echo -e "" 
  echo -e "Outputs transform results and debugging info on screen file for " 
  echo -e "use with kumu.io and transform key 'name' into key 'label'" 
  echo -e "" 
  echo -e "  ottograf -d kumu data.jsonld -x name label"
  echo -e "" 
  } 

# if less than one arguments supplied, display usage 
  if [  $# -le 0 ] 
  then 
    display_usage
    exit 1
  fi 
 
# check whether user had supplied -h or --help . If yes display usage 
  if [[ ( $# == "--help") ||  $# == "-h" ]] 
  then 
    display_usage
    exit 0
  fi 

#defaults
debug=false
format=""
relation="@relation"
nodes="nodes"
edges="links"
index="@id"
src="source"
trg="target"
nodes_label="\"\""
graph_prefix="{}"

# process options
jq_opts=""
tee=">"
pointer=1

while [[ $# > 0 ]]; do
  key="$1"
  case $key in
      # formats
      d3|kumu)                  format=$key; shift;;
      # options with one argument
      -r|--relation-hint)       relation=$2; shift 2;;
      -n|--nodes-key)           nodes=$2; shift 2;;
      -e|--edges-key)           edges=$2; shift 2;;
      -s|--edges-source)        src=$2; shift 2;;
      -t|--edges-target)        trg=$2; shift 2;;
      -l|--nodes-label)         nodes_label=$2; shift 2;;
      -p|--graph-prefix)        graph_prefix=$2; shift 2;;
      # options with two arguments
      -x|--transform)           transform="{\\\"input\\\":\\\"$2\\\",\\\"output\\\":\\\"$3\\\"},$transform"; shift 3;;
      # binary flags
      -i|--edges-index)         index="numeric"; shift;;
      -c|--compact)             jq_opts=$jq_opts + " -c"; shift;;
      -d|--debug)               tee="| tee"; debug=true; shift;;
      # unknown option
      *)
        if [ -z $input ]; then input=$1 ; shift 
        elif [ -z $output ]; then output=$1 ; shift
        else echo -e "Error: ottograf can only take one input file and one output file as arguments"; exit 0
        fi
      ;;
  esac
done

#process transform

# process format
case $format in
  d3) graph_prefix="\"{\"directed\":\"true\",\"graph\":\"[]\"}\""; index="numeric"; transform="{\\\"input\\\":\\\"@id\\\",\\\"output\\\":\\\"id\\\"},$transform";;
  kumu) nodes="elements"; edges="connections"; src="from"; trg="to"; nodes_label="label" transform="{\\\"input\\\":\\\"@id\\\",\\\"output\\\":\\\"label\\\"},$transform";;
esac

transform="\"[${transform:0:${#transform}-1}]\""

if [ -z $output ]; then tee=""; fi

jq_cmd="jq $jq_opts -f /usr/local/bin/ottograf.jq --arg opt_nodes $nodes --arg opt_edges $edges --arg opt_source $src --arg opt_target $trg --arg opt_index $index --arg opt_relation $relation --arg opt_nodes_label $nodes_label --arg opt_graph_prefix $graph_prefix --arg opt_transform $transform $tee $output"

if [ "$debug" = true ]; then echo "[debug] -- jq command   -- $jq_cmd"; fi
if [ "$debug" = true ]; then echo "[debug] -- format       -- $format"; fi
if [ "$debug" = true ]; then echo "[debug] -- input        -- $input"; fi
if [ "$debug" = true ]; then echo "[debug] -- output       -- $output"; fi
if [ "$debug" = true ]; then echo "[debug] -- nodes        -- $nodes"; fi
if [ "$debug" = true ]; then echo "[debug] -- edges        -- $edges"; fi
if [ "$debug" = true ]; then echo "[debug] -- source       -- $src"; fi
if [ "$debug" = true ]; then echo "[debug] -- target       -- $trg"; fi
if [ "$debug" = true ]; then echo "[debug] -- index        -- $index"; fi
if [ "$debug" = true ]; then echo "[debug] -- relation     -- $relation"; fi
if [ "$debug" = true ]; then echo "[debug] -- nodes_label  -- $nodes_label"; fi
if [ "$debug" = true ]; then echo "[debug] -- graph_prefix -- $graph_prefix"; fi

eval "cat $input | $jq_cmd"